#!/bin/bash
source ./helpers

help_prompt="usage: addrecord [-h --help help]

Records are always ':' delimited, and are formatted
Name:Address:Email:Phone. The ':' character cannot
be used in a field.

Special characters are always escaped.
"
dup_field_prompt="Are you sure you want to submit this record (y/n)?
	>:"
improper_dup_field_prompt="Please enter 'y' to submit this record, 'n' to exit
	>:"
new_record_prompt="Would you like to add a new record (y/n)?
 	>:"
improper_new_record_prompt="Please enter 'y' to add a new record, 'n' to exit
	>:"

prompt_loop () {
	read -p "${1}" loop_var
		while true; do
			case ${loop_var} in
				y|Y)	eval ${2}
					exit 0;;
				n|N) 	#exit
					exit 0;;
				*)	read -p "${3}" loop_var;;
			esac
		done
	}

#Create database if not already present
createdatabase

#Check to see if help requested
if [ "${1}" = '-h' -o "${1}" = '--help' -o "${1}" = 'help' ]; then
	echo "${help_prompt}"
	prompt_loop "${new_record_prompt}" "./addrecord" "${improper_new_record_prompt}"
	exit 0
fi

#get input
if ! input_record; then
	echo "${help_prompt}"
	prompt_loop "${new_record_prompt}" "./addrecord" "${improper_new_record_prompt}"
fi

#Check to see if name is a duplicate of another field
match_name=$(grep -n -F "${record[0]}" database.txt)
#Check to see if address is a duplicate of another field
match_address=$(grep -n -F "${record[1]}" database.txt)
#Check to see if phone number is a duplicate of another field
match_email=$(grep -n -F "${record[2]}" database.txt)
#Check to see if email is a duplicate of another field
match_phone=$(grep -n -F "${record[3]}" database.txt)

match=false

#Handle field matches
if [ -n "${match_name}" ]; then
	printf "Entries in the database have fields matching the given name: %s\n%s\n\n" "${record[0]}" "${match_name}"
	match=true
fi
if [ -n "${match_address}" ]; then
	printf "Entries in the database have fields matching the given address: %s\n%s\n\n" "${record[1]}" "${match_address}"
	match=true
fi
if [ -n "${match_email}" ]; then
	printf "Entries in the database have fields matching the given email: %s\n%s\n\n" "${record[2]}" "${match_email}"
	match=true
fi
if [ -n "${match_phone}" ]; then
	printf "Entries in the databse have fields matching the given phone number: %s\n%s\n\n" "${record[3]}" "${match_phone}"
	match=true
fi

#Confirm input on match
if [ ${match} = true ]; then
	read -p "${dup_field_prompt}" valid
        case ${valid} in 
		y|Y) 	#append input to the file
			printf "%s:%s:%s:%s\n" "${record[0]}" "${record[1]}" "${record[2]}" "${record[3]}" >> database.txt;; 
		n|N)	#check if they want to add a new record, exit if not
			prompt_loop "${new_record_prompt}" "./addrecord" "${improper_new_record_prompt}";;
		*)	prompt_loop "${improper_dup_field_prompt}" 'printf "%s:%s:%s:%s\n" "${record[0]}" "${record[1]}" "${record[2]}" "${record[3]}" >> database.txt', \
					"${improper_dup_field_prompt}";;
	esac
	
else
	#Append the input to the file
	printf "%s:%s:%s:%s\n" "${record[0]}" "${record[1]}" "${record[2]}" "${record[3]}" >> database.txt
	#exit
	exit 0
fi
